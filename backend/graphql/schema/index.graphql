type Rank {
    _id: ID!
    index: Int!
    name: String!
    shortName: String!
}

type Position {
    _id: ID!
    name: String!
    shortName: String!
    seniorPosition: Position
    juniorPositions: [Position]!
}

type Address {
    _id: ID!
    region: String
    district: String
    city: String
    village: String
    urbanVillage: String
    street: String
    houseNumber: String
    apartmentNumber: String
}

type Employee {
    _id: ID!
    name: String!
    surname: String!
    patronymic: String!
    dateOfBirth: String!
    addressOfResidence: Address
    registrationAddress: Address
    rank: Rank!
    position: Position!
    type: String
    unit: Unit!
}

type Unit {
    _id: ID!
    name: String!
    shortName: String!
    parentUnit: Unit
    childUnits: [Unit!]!
    head: Employee!
    employees: [Employee!]!
    posts(id: ID): [Post!]!
}

type Post {
    _id: ID!
    name: String!
    shortName: String!
    position: String!
    duties(year: Int, month: Int): [Duty!]!
}

# Date eq to 'YYYY-MM-DD'
type Duty {
    _id: ID!
    date: String!
    employee: Employee!
    type: String!
}

type User {
    _id: ID!
    login: String!
    employee: Employee!
}

type AuthData {
    user: User!
    token: String!
}

#input AddressInput {
#    _id: ID
#    region: String
#    district: String
#    city: String
#    village: String
#    urbanVillage: String
#    street: String
#    houseNumber: String
#    apartmentNumber: String
#}
#
#input EmployeeInput {
#    name: String
#    surname: String
#    patronymic: String
#    dateOfBirth: String
#    addressOfResidence: ID
#    registrationAddress: ID
#    rank: ID!
#    position: ID!
#    unit: ID!
#}

type Query {
#    ranks: [Rank!]!
#    rank(id: String!): Rank
#    position(_id: ID!): Position
#    positions: [Position!]!
#    employees: [Employee!]!
#    employee(id: String!): Employee
#    users: [User!]!
#    user(userId: String!): User
#    userByToken: User!
#    units: [Unit!]!
    login(login: String!, password: String!): AuthData
    unit(id: ID!): Unit
    post(id: ID!): Post!
}

#type Mutation {
#    createUnit(parentUnit: ID!, name: String!, shortName: String!, head: ID!): Unit!
#    createEmployee(employee: EmployeeInput!, addressOfResidence: AddressInput, registrationAddress: AddressInput): Employee!
#    updateEmployee(id: ID!, data: EmployeeInput, addressOfResidence: AddressInput, registrationAddress: AddressInput): Employee!
#    updateAddress(id: ID!, data: AddressInput!): Address!
#    deleteEmployee(id: ID!): Employee!
#    createPost(unitId: ID!, postName: String!): Post!
#    deletePost(id: ID!): Post!
#}

schema {
    query: Query
#    mutation: Mutation
}
type Rank {
    _id: ID!
    index: Int!
    name: String!
    shortName: String!
}

type Position {
    _id: ID!
    name: String!
    shortName: String!
    seniorPosition: Position
    juniorPositions: [Position]!
}

type Address {
    _id: ID!
    region: String
    district: String
    city: String
    village: String
    urbanVillage: String
    street: String
    houseNumber: String
    apartmentNumber: String
}

type Employee {
    _id: ID!
    name: String!
    surname: String!
    patronymic: String!
    dateOfBirth: String!
    addressOfResidence: Address
    registrationAddress: Address
    rank: Rank!
    position: Position!
    type: String
    unit: Unit!
}

type Unit {
    _id: ID!
    name: String!
    shortName: String!
    parentUnit: Unit
    childUnits: [Unit!]!
    head: Employee!
    employees: [Employee!]!
    posts(id: ID): [Post!]!
}

type Post {
    _id: ID!
    name: String!
    shortName: String!
    position: String!
    duties(year: Int, month: Int): [Duty!]!
}

type Duty {
    _id: ID!
    date: String!
    employee: Employee!
    type: String!
}

# bad name
type DutyExistence {
    year: Int!
    month: Int!
}

input DutyInput {
    type: String!
    date: String!
    employee: ID!
}

type User {
    _id: ID!
    login: String!
    employee: Employee!
}

type AuthData {
    user: User!
    token: String!
}

type Query {
    login(login: String!, password: String!): AuthData
    unit(id: ID!): Unit
    post(id: ID!): Post!
    dutyExistence(postId: ID!): [DutyExistence!]!
}

type Mutation {
    saveDuties(postId: ID!, duties: [DutyInput]!): Post!
}

schema {
    query: Query
    mutation: Mutation
}